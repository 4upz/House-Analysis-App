{"version":3,"sources":["components/Form.jsx","App.jsx","serviceWorker.js","index.js"],"names":["Form","props","state","address","zip","price","loanAmount","interestRate","loanPeriod","rent","initialExpenses","monthlyExpenses","handleNumberChange","bind","handleTextChange","event","preventDefault","value","target","this","setState","name","updatePropertyInfo","isNaN","parseFloat","Box","backgroundColor","width","p","textAlign","className","onSubmit","handleSubmit","Flex","flexWrap","justifyContent","FormControl","FormLabel","htmlFor","Input","onChange","type","id","placeholder","aria-describedby","FormHelperText","mb","maxLength","min","React","Component","App","calculateResults","field","newVal","totalProjectCost","outOfPocketCosts","monthlyMortgagePayment","calculatedMonthlyMortgage","totalIncome","totalExpenses","cashFlow","cocROI","totalROI","estimatedMonthlyIncome","estimatedInitialExpenses","estimatedMonthlyExpenses","Math","round","period","numOfPeriodicPayments","periodicInterestRate","discountFactor","pow","results","ThemeProvider","CSSReset","Heading","alignItems","flexDir","Results","py","mt","Text","fontSize","Link","color","href","Date","getFullYear","header","my","as","size","Stat","alignContent","align","whiteSpace","lg","sm","px","formattedNumDisplayOf","resultNumber","isFinite","toLocaleString","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.4e474588.chunk.js","sourcesContent":["import React from \"react\";\nimport {\n  Box,\n  FormControl,\n  FormLabel,\n  FormHelperText,\n  Input,\n  Flex,\n} from \"@chakra-ui/core\";\n\nexport default class Form extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      address: \"\",\n      zip: \"\",\n      price: 0,\n      loanAmount: 0,\n      interestRate: 0,\n      loanPeriod: 0,\n      rent: 0,\n      initialExpenses: 0,\n      monthlyExpenses: 0,\n    };\n    this.handleNumberChange = this.handleNumberChange.bind(this);\n    this.handleTextChange = this.handleTextChange.bind(this);\n  }\n\n  // Updates the state based on the change target value and using its name as a dynamic key name\n  handleTextChange(event) {\n    event.preventDefault();\n    const value = event.target.value;\n    this.setState({ [event.target.name]: value });\n    this.props.updatePropertyInfo(event.target.name, value);\n  }\n\n  // Variant for number values (until I find a way to combine these methods)\n  handleNumberChange(event) {\n    event.preventDefault();\n    // Should store the value as a float if the input expects a number\n    const value = isNaN(event.target.value)\n      ? 0\n      : parseFloat(event.target.value);\n    this.setState({ [event.target.name]: value });\n    this.props.updatePropertyInfo(event.target.name, value);\n  }\n\n  render() {\n    return (\n      <Box\n        backgroundColor=\"white\"\n        width={[\"80%\",\"60%\"]}\n        p={5}\n        textAlign={[\"center\", \"left\"]}\n        className=\"Card-Display\"\n      >\n        <form onSubmit={this.handleSubmit}>\n          {/* House Location Information */}\n          <Flex flexWrap=\"wrap\" justifyContent={[\"center\", \"space-between\"]}>\n            {/* Address Field */}\n            <FormControl>\n              <FormLabel htmlFor=\"address\">Address</FormLabel>\n              <Input\n                name=\"address\"\n                value={this.state.address}\n                onChange={this.handleTextChange}\n                type=\"text\"\n                id=\"address\"\n                placeholder=\"42 Wallaby Way Sydney, Australia\"\n                aria-describedby=\"address-helper-text\"\n              />\n              <FormHelperText id=\"address-helper-text\" mb=\"0.5rem\">\n                Where is it located?\n              </FormHelperText>\n            </FormControl>\n            {/* Zip Code Field */}\n            <FormControl>\n              <FormLabel htmlFor=\"zip\">Zip Code</FormLabel>\n              <Input\n                name=\"zip\"\n                value={this.state.zip}\n                onChange={this.handleTextChange}\n                type=\"text\"\n                id=\"zip\"\n                placeholder=\"12345\"\n                aria-describedby=\"zip-helper-text\"\n                maxLength=\"5\"\n              />\n              <FormHelperText id=\"zip-helper-text\" mb=\"0.5rem\">\n                The 5 digit neighborhood code.\n              </FormHelperText>\n            </FormControl>\n            {/* Purchase Price & Information */}\n            {/* Purchase Price */}\n            <FormControl>\n              <FormLabel htmlFor=\"price\">Purchase Price</FormLabel>\n              <Input\n                name=\"price\"\n                onChange={this.handleNumberChange}\n                type=\"number\"\n                id=\"price\"\n                placeholder=\"120000\"\n                aria-describedby=\"price-helper-text\"\n              />\n              <FormHelperText id=\"zip-helper-text\" mb=\"0.5rem\">\n                Exclude commas and use US dollars.\n              </FormHelperText>\n            </FormControl>\n            {/* Loan Info Group */}\n            {/* Loan Amount*/}\n            <FormControl>\n              <FormLabel htmlFor=\"loan\">Loan Amount</FormLabel>\n              <Input\n                name=\"loanAmount\"\n                onChange={this.handleNumberChange}\n                type=\"number\"\n                id=\"loan\"\n                placeholder=\"100000\"\n                aria-describedby=\"loan-helper-text\"\n              />\n              <FormHelperText id=\"loan-helper-text\" mb=\"0.5rem\">\n                Round to the nearest whole number.\n              </FormHelperText>\n            </FormControl>\n            {/* Loan Interest Rate*/}\n            <FormControl>\n              <FormLabel htmlFor=\"interestRate\">Loan Interest Rate</FormLabel>\n              <Input\n                name=\"interestRate\"\n                onChange={this.handleNumberChange}\n                type=\"number\"\n                id=\"interestRate\"\n                placeholder=\"5\"\n                aria-describedby=\"interest-helper-text\"\n              />\n              <FormHelperText id=\"interest-helper-text\" mb=\"0.5rem\">\n                Rounded percentage rate.\n              </FormHelperText>\n            </FormControl>\n            {/* Loan Period*/}\n            <FormControl>\n              <FormLabel htmlFor=\"loan-period\">Loan Period</FormLabel>\n              <Input\n                min={0}\n                name=\"loanPeriod\"\n                id=\"loan-period\"\n                placeholder=\"20\"\n                aria-describedby=\"loan-period-helper-text\"\n                onChange={this.handleNumberChange}\n                type=\"number\"\n              />\n              <FormHelperText id=\"loan-period-helper-text\" mb=\"0.5rem\">\n                Length of loan in years.\n              </FormHelperText>\n            </FormControl>\n            {/* Income and Expenses information */}\n            <FormControl>\n              {/* Estimated Monthly Rent */}\n              <FormLabel htmlFor=\"rent\">Estimated Monthly Rent</FormLabel>\n              <Input\n                name=\"rent\"\n                onChange={this.handleNumberChange}\n                type=\"number\"\n                id=\"rent\"\n                placeholder=\"1200\"\n                aria-describedby=\"rent-helper-text\"\n              />\n              <FormHelperText id=\"rent-helper-text\" mb=\"0.5rem\">\n                Exclude commas and use US dollars.\n              </FormHelperText>\n            </FormControl>\n            {/* Initial Expenses */}\n            <FormControl>\n              <FormLabel htmlFor=\"initial-expenses\">\n                Estimated Initial Expenses\n              </FormLabel>\n              <Input\n                name=\"initialExpenses\"\n                onChange={this.handleNumberChange}\n                type=\"number\"\n                id=\"initial-expenses\"\n                placeholder=\"17000\"\n                aria-describedby=\"initial-expenses-helper-text\"\n              />\n              <FormHelperText id=\"initial-expenses-helper-text\" mb=\"0.5rem\">\n                Closing costs, initial repairs, etc.\n              </FormHelperText>\n            </FormControl>\n            {/* Recurring Monthly Expenses */}\n            <FormControl>\n              <FormLabel htmlFor=\"monthly-expenses\">\n                Estimated Monthly Expenses\n              </FormLabel>\n              <Input\n                name=\"monthlyExpenses\"\n                onChange={this.handleNumberChange}\n                type=\"number\"\n                id=\"monthly-expenses\"\n                placeholder=\"350\"\n                aria-describedby=\"monthly-expenses-helper-text\"\n              />\n              <FormHelperText id=\"monthly-expenses-helper-text\" mb=\"0.5rem\">\n                Recurring bills excluding mortgage.\n              </FormHelperText>\n            </FormControl>\n          </Flex>\n        </form>\n      </Box>\n    );\n  }\n}\n","import React from \"react\";\nimport \"./App.css\";\nimport Form from \"./components/Form\";\n\n// Chakra UI Components\nimport {\n  ThemeProvider,\n  CSSReset,\n  Heading,\n  Box,\n  Flex,\n  Text,\n  Link,\n  StatGroup,\n  Stat,\n  StatLabel,\n  StatNumber,\n} from \"@chakra-ui/core\";\n\nexport default class App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      address: \"\",\n      zip: \"\",\n      price: 0,\n      loanAmount: 0,\n      interestRate: 0,\n      loanPeriod: 0,\n      rent: 0,\n      initialExpenses: 0,\n      monthlyExpenses: 0,\n    };\n    this.calculateResults = this.calculateResults.bind(this);\n    this.updatePropertyInfo = this.updatePropertyInfo.bind(this);\n  }\n\n  // Updates the state based on the given field and its updated value\n  updatePropertyInfo(field, newVal) {\n    this.setState({ [field]: newVal });\n  }\n\n  calculateResults() {\n    // Step One: Purchase Cost\n    const totalProjectCost = this.state.price + this.state.initialExpenses;\n    // Step Two: Total Cost Out of Pocket\n    const outOfPocketCosts = totalProjectCost - this.state.loanAmount;\n    // Step Three: Calculate the monthly mortgage payment (loan amortization)\n    const monthlyMortgagePayment = this.calculatedMonthlyMortgage(\n      this.state.loanAmount,\n      this.state.interestRate,\n      this.state.loanPeriod\n    );\n    // Step Four: Determine Total Income\n    const totalIncome = this.state.rent;\n    // Step Five: Determine Total Expenses\n    const totalExpenses = this.state.monthlyExpenses + monthlyMortgagePayment;\n\n    // Step Six: Evaluate the Deal\n    const totalProfit =\n      this.state.price - this.state.initialExpenses - outOfPocketCosts;\n    // cocROI = annualCashFlow / totalInvestedCapital\n    // totalROI = (totalProfit / totalInvestedCapital) / time (before selling)\n    const cashFlow = totalIncome - totalExpenses;\n    const cocROI = ((cashFlow * 12) / outOfPocketCosts) * 100;\n\n    // TODO: Add a feature to see the different totalROI across adjustable time period\n    const totalROI =\n      (totalProfit / outOfPocketCosts / this.state.loanPeriod) * 100;\n\n    const results = {\n      totalProjectCost: totalProjectCost,\n      outOfPocketCosts: outOfPocketCosts,\n      monthlyMortgagePayment: monthlyMortgagePayment,\n      estimatedMonthlyIncome: totalIncome,\n      estimatedInitialExpenses: this.state.initialExpenses,\n      estimatedMonthlyExpenses: totalExpenses,\n      cashFlow: cashFlow,\n      cocROI: Math.round(10000 * cocROI) / 10000, // round X to ten thousandth\n      totalROI: Math.round(10000 * totalROI) / 10000, // round X to ten thousandth\n    };\n    return results;\n  }\n\n  calculatedMonthlyMortgage(loanAmount, interestRate, period) {\n    /* \n        Based on Monthly Fixed-Rate Mortgage method \n        Follows steps provided by https://www.thebalance.com/calculate-mortgage-315668\n        Monthly Loan Payment = Loan Amount / Discount Factor \n        */\n    const numOfPeriodicPayments = period * 12;\n    const periodicInterestRate = interestRate / 100 / 12;\n    const discountFactor =\n      (Math.pow(1 + periodicInterestRate, numOfPeriodicPayments) - 1) /\n      (periodicInterestRate *\n        Math.pow(1 + periodicInterestRate, numOfPeriodicPayments));\n    // Round to nearest hundredth\n    return Math.round(100 * (loanAmount / discountFactor)) / 100;\n  }\n\n  render() {\n    const results = this.calculateResults();\n    return (\n      <ThemeProvider>\n        <CSSReset />\n        <Box className=\"App\" backgroundColor=\"gray.50\">\n          <Heading textAlign=\"center\" mb={4}>\n            Rental Property Analysis\n          </Heading>\n          <Flex\n            className=\"Anlysis-Display\"\n            alignItems=\"center\"\n            justifyContent=\"space-around\"\n            flexDir=\"column\"\n          >\n            {/* Form for taking House Info */}\n            <Form\n              updatePropertyInfo={this.updatePropertyInfo}\n              calculateResults={this.calculateResults}\n            />\n            {/* Only Renders when form is submitted */}\n            <Results\n              address={this.state.address}\n              zip={this.state.zip}\n              results={results}\n            />\n          </Flex>\n          <Box className=\"Footer\" py={6} mt={3}>\n            <footer>\n              <Text fontSize=\"sm\">\n                Inspired by{\" \"}\n                <Link\n                  color=\"teal.500\"\n                  href=\"https://www.biggerpockets.com/buy_and_hold_results/new\"\n                >\n                  Bigger Pockets Property Analysis Tool\n                </Link>\n              </Text>\n              <Text fontSize=\"sm\">\n                Copyright &copy; {new Date().getFullYear()} Smith & Butler LLC\n              </Text>\n            </footer>\n          </Box>\n        </Box>\n      </ThemeProvider>\n    );\n  }\n}\n\nfunction Results(props) {\n  const results = props.results;\n  const header =\n    props.address === \"\" && props.zip === \"\"\n      ? \" \"\n      : `Showing Analysis for ${props.address}, ${props.zip}`;\n  return (\n    <Box\n      className=\"Card-Display\"\n      p={5}\n      width={[\"80%\", \"40%\"]}\n      my={6}\n      backgroundColor=\"white\"\n    >\n      <Heading textAlign=\"center\" as=\"h2\" size=\"md\" mb={6}>\n        {header}\n      </Heading>\n      <StatGroup\n        flexWrap=\"wrap\"\n        alignContent=\"center\"\n        align=\"center\"\n        justifyContent=\"space-evenly\"\n        whiteSpace={{ lg: \"nowrap\", sm: \"normal\" }}\n        textAlign=\"center\"\n      >\n        <Stat px={2}>\n          <StatLabel>Total Projected Cost</StatLabel>\n          <StatNumber>\n            ${formattedNumDisplayOf(results.totalProjectCost)}\n          </StatNumber>\n        </Stat>\n        <Stat px={2}>\n          <StatLabel>Out of Pocket Cost</StatLabel>\n          <StatNumber>\n            ${formattedNumDisplayOf(results.outOfPocketCosts)}\n          </StatNumber>\n        </Stat>\n        <Stat px={2}>\n          <StatLabel>Monthly Mortgage</StatLabel>\n          <StatNumber>\n            ${formattedNumDisplayOf(results.monthlyMortgagePayment)}\n          </StatNumber>\n        </Stat>\n        <Stat px={2}>\n          <StatLabel>Estimated Monthly Income</StatLabel>\n          <StatNumber>\n            ${formattedNumDisplayOf(results.estimatedMonthlyIncome)}\n          </StatNumber>\n        </Stat>\n        <Stat px={2}>\n          <StatLabel>Estimated Monthly Expenses</StatLabel>\n          <StatNumber>\n            ${formattedNumDisplayOf(results.estimatedMonthlyExpenses)}\n          </StatNumber>\n        </Stat>\n        <Stat px={2}>\n          <StatLabel>Cash Flow</StatLabel>\n          <StatNumber>${formattedNumDisplayOf(results.cashFlow)}</StatNumber>\n        </Stat>\n        <Stat px={2}>\n          <StatLabel>Cash on Cash Return on Investment</StatLabel>\n          <StatNumber>{formattedNumDisplayOf(results.cocROI)}%</StatNumber>\n        </Stat>\n        <Stat px={2}>\n          <StatLabel>Total Return on Investment</StatLabel>\n          <StatNumber>{formattedNumDisplayOf(results.totalROI)}%</StatNumber>\n        </Stat>\n      </StatGroup>\n    </Box>\n  );\n}\n\n/* **** Utility Functions **** */\n// If the result is not a number or not yet calculated, display it as 0\nfunction formattedNumDisplayOf(resultNumber) {\n  return isFinite(resultNumber) ? resultNumber.toLocaleString() : \"0\";\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App.jsx';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}