{"version":3,"sources":["components/Form.jsx","App.jsx","serviceWorker.js","index.js"],"names":["Form","props","state","address","zip","price","loanAmount","interest","loanPeriod","rent","initialExpenses","monthlyExpenses","handleNumberChange","bind","handleTextChange","handleSubmit","event","value","target","this","setState","name","parseFloat","startAnalysis","preventDefault","calculateResults","style","width","onSubmit","Flex","justifyContent","FormControl","w","FormLabel","htmlFor","Input","onChange","type","id","placeholder","aria-describedby","FormHelperText","mb","maxLength","min","max","mt","Button","variantColor","React","Component","App","totalProjectCost","outOfPocketCosts","monthlyMortgagePayment","estimatedIncome","estimatedInitialExpenses","estimatedMonthlyExpenses","cashFlow","cocROI","totalROI","dislayResults","interestRate","period","calculatedMonthlyMortgage","totalIncome","totalExpenses","Math","round","displayResults","numOfPeriodicPayments","periodicInterestRate","discountFactor","pow","ThemeProvider","CSSReset","Box","className","Heading","textAlign","alignItems","Results","estimatedMonthlyIncome","py","Text","fontSize","Link","color","href","Date","getFullYear","my","Stack","align","toLocaleString","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.549eff87.chunk.js","sourcesContent":["import React from \"react\";\r\nimport {\r\n    Button,\r\n    FormControl,\r\n    FormLabel,\r\n    FormHelperText,\r\n    Input,\r\n    Flex\r\n} from \"@chakra-ui/core\";\r\n\r\nexport default class Form extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            address: \"\",\r\n            zip: \"\",\r\n            price: 0,\r\n            loanAmount: 0,\r\n            interest: 0,\r\n            loanPeriod: 0,\r\n            rent: 0,\r\n            initialExpenses: 0,\r\n            monthlyExpenses: 0,\r\n        };\r\n        this.handleNumberChange = this.handleNumberChange.bind(this);\r\n        this.handleTextChange = this.handleTextChange.bind(this);\r\n        this.handleSubmit = this.handleSubmit.bind(this);\r\n    }\r\n\r\n    // Updates the state based on the change target value and using its name as a dynamic key name\r\n    handleTextChange(event) {\r\n        const value = event.target.value;\r\n        this.setState({ [event.target.name]: value });\r\n    }\r\n\r\n    // Variant for number values (until I find a way to combine these methods)\r\n    handleNumberChange(event) {\r\n        // Should store the value as a float if the input expects a number\r\n        const value = parseFloat(event.target.value);\r\n        this.setState({ [event.target.name]: value });\r\n    }\r\n\r\n    handleSubmit(event) {\r\n        this.startAnalysis();\r\n        event.preventDefault();\r\n    }\r\n\r\n    startAnalysis() {\r\n        this.props.calculateResults(\r\n            this.state.price,\r\n            this.state.loanAmount,\r\n            this.state.interest,\r\n            this.state.loanPeriod,\r\n            this.state.rent,\r\n            this.state.initialExpenses,\r\n            this.state.monthlyExpenses\r\n        );\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <form style={{ width: \"50%\" }} onSubmit={this.handleSubmit}>\r\n                {/* House Location Information */}\r\n                <Flex justifyContent=\"space-between\">\r\n                    {/* Address Field */}\r\n                    <FormControl w=\"40%\">\r\n                        <FormLabel htmlFor=\"address\">Address</FormLabel>\r\n                        <Input\r\n                            name=\"address\"\r\n                            value={this.state.address}\r\n                            onChange={this.handleTextChange}\r\n                            type=\"text\"\r\n                            id=\"address\"\r\n                            placeholder=\"42 Wallaby Way Sydney, Australia\"\r\n                            aria-describedby=\"address-helper-text\"\r\n                        />\r\n                        <FormHelperText id=\"address-helper-text\" mb=\"0.5rem\">\r\n                            Where is it located?\r\n                        </FormHelperText>\r\n                    </FormControl>\r\n                    {/* Zip Code Field */}\r\n                    <FormControl w=\"40%\">\r\n                        <FormLabel htmlFor=\"zip\">Zip Code</FormLabel>\r\n                        <Input\r\n                            name=\"zip\"\r\n                            value={this.state.zip}\r\n                            onChange={this.handleTextChange}\r\n                            type=\"text\"\r\n                            id=\"zip\"\r\n                            placeholder=\"12345\"\r\n                            aria-describedby=\"zip-helper-text\"\r\n                            maxLength=\"5\"\r\n                        />\r\n                        <FormHelperText id=\"zip-helper-text\" mb=\"0.5rem\">\r\n                            The 5 digit neighborhood code.\r\n                        </FormHelperText>\r\n                    </FormControl>\r\n                </Flex>\r\n                {/* Purchase Price & Information */}\r\n                <Flex justifyContent=\"space-between\">\r\n                    {/* Purchase Price */}\r\n                    <FormControl w=\"40%\">\r\n                        <FormLabel htmlFor=\"price\">Purchase Price</FormLabel>\r\n                        <Input\r\n                            name=\"price\"\r\n                            value={this.state.price}\r\n                            onChange={this.handleNumberChange}\r\n                            type=\"number\"\r\n                            id=\"price\"\r\n                            placeholder=\"120000\"\r\n                            aria-describedby=\"price-helper-text\"\r\n                        />\r\n                        <FormHelperText id=\"zip-helper-text\" mb=\"0.5rem\">\r\n                            Exclude commas and use US dollars.\r\n                        </FormHelperText>\r\n                    </FormControl>\r\n                    {/* Loan Amount*/}\r\n                    <FormControl w=\"40%\">\r\n                        <FormLabel htmlFor=\"loan\">Loan Amount</FormLabel>\r\n                        <Input\r\n                            name=\"loanAmount\"\r\n                            value={this.state.loanAmount}\r\n                            onChange={this.handleNumberChange}\r\n                            type=\"number\"\r\n                            id=\"loan\"\r\n                            placeholder=\"100000\"\r\n                            aria-describedby=\"loan-helper-text\"\r\n                        />\r\n                        <FormHelperText id=\"loan-helper-text\" mb=\"0.5rem\">\r\n                            Round to the nearest whole number.\r\n                        </FormHelperText>\r\n                    </FormControl>\r\n                </Flex>\r\n                {/* Loan Info Group */}\r\n                <Flex justifyContent=\"space-between\">\r\n                    {/* Loan Interest Rate*/}\r\n                    <FormControl w=\"40%\">\r\n                        <FormLabel htmlFor=\"interest\">\r\n                            Loan Interest Rate\r\n                        </FormLabel>\r\n                        <Input\r\n                            name=\"interest\"\r\n                            value={this.state.interest}\r\n                            onChange={this.handleNumberChange}\r\n                            type=\"number\"\r\n                            id=\"interest\"\r\n                            placeholder=\"5\"\r\n                            aria-describedby=\"interest-helper-text\"\r\n                        />\r\n                        <FormHelperText id=\"interest-helper-text\" mb=\"0.5rem\">\r\n                            Rounded percentage rate.\r\n                        </FormHelperText>\r\n                    </FormControl>\r\n                    {/* Loan Period*/}\r\n                    <FormControl w=\"40%\">\r\n                        <FormLabel htmlFor=\"loan-period\">Loan Period</FormLabel>\r\n                        <Input\r\n                            min={0}\r\n                            max={50}\r\n                            name=\"loanPeriod\"\r\n                            id=\"loan-period\"\r\n                            placeholder=\"20\"\r\n                            aria-describedby=\"loan-period-helper-text\"\r\n                            onChange={this.handleNumberChange}\r\n                            value={this.state.loanPeriod}\r\n                            type=\"number\"\r\n                        />\r\n                        <FormHelperText\r\n                            id=\"loan-period-helper-text\"\r\n                            mb=\"0.5rem\"\r\n                        >\r\n                            Length of loan in years.\r\n                        </FormHelperText>\r\n                    </FormControl>\r\n                </Flex>\r\n                {/* Income and Expenses information */}\r\n                <Flex justifyContent=\"space-between\">\r\n                    <FormControl w=\"30%\">\r\n                        {/* Estimated Monthly Rent */}\r\n                        <FormLabel htmlFor=\"rent\">\r\n                            Estimated Monthly Rent\r\n                        </FormLabel>\r\n                        <Input\r\n                            name=\"rent\"\r\n                            value={this.state.rent}\r\n                            onChange={this.handleNumberChange}\r\n                            type=\"number\"\r\n                            id=\"rent\"\r\n                            placeholder=\"1200\"\r\n                            aria-describedby=\"rent-helper-text\"\r\n                        />\r\n                        <FormHelperText id=\"rent-helper-text\" mb=\"0.5rem\">\r\n                            Exclude commas and use US dollars.\r\n                        </FormHelperText>\r\n                    </FormControl>\r\n                    {/* Initial Expenses */}\r\n                    <FormControl w=\"30%\">\r\n                        <FormLabel htmlFor=\"initial-expenses\">\r\n                            Estimated Initial Expenses\r\n                        </FormLabel>\r\n                        <Input\r\n                            name=\"initialExpenses\"\r\n                            value={this.state.initialExpenses}\r\n                            onChange={this.handleNumberChange}\r\n                            type=\"number\"\r\n                            id=\"initial-expenses\"\r\n                            placeholder=\"17000\"\r\n                            aria-describedby=\"initial-expenses-helper-text\"\r\n                        />\r\n                        <FormHelperText\r\n                            id=\"initial-expenses-helper-text\"\r\n                            mb=\"0.5rem\"\r\n                        >\r\n                            Closing costs, initial repairs, etc.\r\n                        </FormHelperText>\r\n                    </FormControl>\r\n                    {/* Recurring Monthly Expenses */}\r\n                    <FormControl w=\"30%\">\r\n                        <FormLabel htmlFor=\"monthly-expenses\">\r\n                            Estimated Monthly Expenses\r\n                        </FormLabel>\r\n                        <Input\r\n                            name=\"monthlyExpenses\"\r\n                            value={this.state.monthlyExpenses}\r\n                            onChange={this.handleNumberChange}\r\n                            type=\"number\"\r\n                            id=\"monthly-expenses\"\r\n                            placeholder=\"902.27\"\r\n                            aria-describedby=\"monthly-expenses-helper-text\"\r\n                        />\r\n                        <FormHelperText\r\n                            id=\"monthly-expenses-helper-text\"\r\n                            mb=\"0.5rem\"\r\n                        >\r\n                            Recurring bills including gas, electric, etc.\r\n                        </FormHelperText>\r\n                    </FormControl>\r\n                </Flex>\r\n                {/* Submission Button */}\r\n                <Flex justifyContent=\"center\" mt={4}>\r\n                    <Button\r\n                        variantColor=\"teal\"\r\n                        name=\"submit\"\r\n                        type=\"submit\"\r\n                        w=\"40%\"\r\n                    >\r\n                        Analyze\r\n                    </Button>\r\n                </Flex>\r\n            </form>\r\n        );\r\n    }\r\n}\r\n","import React from \"react\";\nimport \"./App.css\";\nimport Form from \"./components/Form\";\n\n// Chakra UI Components\nimport {\n    ThemeProvider,\n    CSSReset,\n    Heading,\n    Box,\n    Flex,\n    Text,\n    Stack,\n    Link,\n} from \"@chakra-ui/core\";\n\nexport default class App extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            totalProjectCost: 0,\n            outOfPocketCosts: 0,\n            monthlyMortgagePayment: 0,\n            estimatedIncome: 0,\n            estimatedInitialExpenses: 0,\n            estimatedMonthlyExpenses: 0,\n            cashFlow: 0,\n            cocROI: 0,\n            totalROI: 0,\n            dislayResults: false,\n        };\n        this.calculateResults = this.calculateResults.bind(this);\n    }\n\n    calculateResults(\n        price,\n        loanAmount,\n        interestRate,\n        period,\n        rent,\n        initialExpenses,\n        monthlyExpenses\n    ) {\n        // Step One: Purchase Cost\n        const totalProjectCost = price + initialExpenses;\n        // Step Two: Total Cost Out of Pocket\n        const outOfPocketCosts = totalProjectCost - loanAmount;\n        // Step Three: Calculate the monthly mortgage payment (loan amortization)\n        const monthlyMortgagePayment = this.calculatedMonthlyMortgage(\n            loanAmount,\n            interestRate,\n            period\n        );\n        // Step Four: Determine Total Income\n        const totalIncome = rent;\n        // Step Five: Determine Total Expenses\n        const totalExpenses = monthlyExpenses + monthlyMortgagePayment;\n\n        // Step Six: Evaluate the Deal\n        const totalProfit = price - initialExpenses - outOfPocketCosts;\n        // cocROI = annualCashFlow / totalInvestedCapital\n        // totalROI = (totalProfit / totalInvestedCapital) / time (before selling)\n        const cashFlow = totalIncome - totalExpenses;\n        const cocROI = ((cashFlow * 12) / outOfPocketCosts) * 100;\n\n        // TODO: Add a feature to see the different totalROI across adjustable time period\n        const totalROI = (totalProfit / outOfPocketCosts / period) * 100;\n\n        this.setState({\n            totalProjectCost: totalProjectCost,\n            outOfPocketCosts: outOfPocketCosts,\n            monthlyMortgagePayment: monthlyMortgagePayment,\n            estimatedIncome: totalIncome,\n            estimatedInitialExpenses: initialExpenses,\n            estimatedMonthlyExpenses: totalExpenses,\n            cashFlow: cashFlow,\n            cocROI: Math.round(10000 * cocROI) / 10000, // round X to ten thousandth\n            totalROI: Math.round(10000 * totalROI) / 10000, // round X to ten thousandth\n            displayResults: true,\n        });\n    }\n\n    calculatedMonthlyMortgage(loanAmount, interestRate, period) {\n        /* \n        Based on Monthly Fixed-Rate Mortgage method \n        Follows steps provided by https://www.thebalance.com/calculate-mortgage-315668\n        Monthly Loan Payment = Loan Amount / Discount Factor \n        */\n        const numOfPeriodicPayments = period * 12;\n        const periodicInterestRate = interestRate / 100 / 12;\n        const discountFactor =\n            (Math.pow(1 + periodicInterestRate, numOfPeriodicPayments) - 1) /\n            (periodicInterestRate *\n                Math.pow(1 + periodicInterestRate, numOfPeriodicPayments));\n        // Round to nearest hundredth\n        return Math.round(100 * (loanAmount / discountFactor)) / 100;\n    }\n\n    render() {\n        return (\n            <ThemeProvider>\n                <CSSReset />\n                <Box className=\"App\">\n                    <Heading textAlign=\"center\" mb={4}>\n                        Rental Property Analysis\n                    </Heading>\n                    <Flex alignItems=\"center\" justifyContent=\"space-around\">\n                        {/* Form for taking House Info */}\n                        <Form calculateResults={this.calculateResults} />\n                        {/* Only Renders when form is submitted */}\n                        <Results\n                            totalProjectCost={this.state.totalProjectCost}\n                            outOfPocketCosts={this.state.outOfPocketCosts}\n                            monthlyMortgagePayment={\n                                this.state.monthlyMortgagePayment\n                            }\n                            estimatedMonthlyIncome={this.state.estimatedIncome}\n                            estimatedMonthlyExpenses={\n                                this.state.estimatedMonthlyExpenses\n                            }\n                            cashFlow={this.state.cashFlow}\n                            cocROI={this.state.cocROI}\n                            totalROI={this.state.totalROI}\n                        />\n                    </Flex>\n                    <Box className=\"Footer\" py={6} mt={3}>\n                        <footer>\n                            <Text fontSize=\"sm\">\n                                Inspired by{\" \"}\n                                <Link\n                                    color=\"teal.500\"\n                                    href=\"https://www.biggerpockets.com/buy_and_hold_results/new\"\n                                >\n                                    Bigger Pockets Property Analysis Tool\n                                </Link>\n                            </Text>\n                            <Text fontSize=\"sm\">\n                                Copyright &copy; {new Date().getFullYear()}{\" \"}\n                                Smith & Butler LLC\n                            </Text>\n                        </footer>\n                    </Box>\n                </Box>\n            </ThemeProvider>\n        );\n    }\n}\n\nfunction Results(props) {\n    return (\n        <Box my={6}>\n            <Stack align=\"center\">\n                <Text>\n                    Total Projected Cost: $\n                    {props.totalProjectCost.toLocaleString()}\n                </Text>\n                <Text>\n                    Out of Pocket Cost: $\n                    {props.outOfPocketCosts.toLocaleString()}\n                </Text>\n                <Text>\n                    Monthly Mortgage Payment: $\n                    {props.monthlyMortgagePayment.toLocaleString()}\n                </Text>\n                <Text>\n                    Estimated Monthly Income: $\n                    {props.estimatedMonthlyIncome.toLocaleString()}\n                </Text>\n                <Text>\n                    Estimated Monthly Expenses: $\n                    {props.estimatedMonthlyExpenses.toLocaleString()}\n                </Text>\n                <Text>Cash Flow: ${props.cashFlow.toLocaleString()}</Text>\n                <Text>\n                    Cash on Cash Return on Investment:{\" \"}\n                    {props.cocROI.toLocaleString()}%\n                </Text>\n                <Text>\n                    Total Return on Investment {props.totalROI.toLocaleString()}\n                    %\n                </Text>\n            </Stack>\n        </Box>\n    );\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App.jsx';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}