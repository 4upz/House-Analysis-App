{"version":3,"sources":["components/Form.jsx","components/Results.jsx","App.jsx","serviceWorker.js","index.js"],"names":["Form","props","Box","backgroundColor","width","p","textAlign","className","Flex","flexWrap","justifyContent","FormControl","FormLabel","htmlFor","Input","name","onChange","handleInputChange","type","id","placeholder","aria-describedby","FormHelperText","mb","maxLength","min","Results","results","header","address","zip","my","Heading","as","size","Stat","alignContent","align","whiteSpace","lg","sm","px","minW","formattedNumDisplayOf","totalProjectCost","outOfPocketCosts","monthlyMortgagePayment","estimatedMonthlyIncome","estimatedMonthlyExpenses","cashFlow","projectedSalesPrice","projectedSalesExpenses","cocROI","totalROI","Slider","aria-label","defaultValue","holdingTerm","handleSliderChange","max","bg","Text","display","color","resultNumber","isFinite","toLocaleString","App","state","price","loanAmount","interestRate","loanPeriod","rent","initialExpenses","monthlyExpenses","updatePropertyInfo","bind","calculateResults","field","newVal","this","setState","event","value","preventDefault","target","isNaN","parseFloat","calculatedMonthlyMortgage","totalIncome","totalExpenses","remainingLoan","calculatedHouseAppreciation","Math","round","estimatedInitialExpenses","period","numOfPeriodicPayments","periodicInterestRate","discountFactor","pow","currentEquity","i","ThemeProvider","CSSReset","alignItems","flexDir","py","mt","fontSize","Link","href","Date","getFullYear","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.e1c56bea.chunk.js","sourcesContent":["import React from \"react\";\n\n// Chakra UI Components\nimport {\n  Box,\n  FormControl,\n  FormLabel,\n  FormHelperText,\n  Input,\n  Flex\n} from \"@chakra-ui/core\";\n\nexport default function Form(props) {\n    return (\n      <Box\n        backgroundColor=\"white\"\n        width={[\"80%\", \"60%\"]}\n        p={5}\n        textAlign={[\"center\", \"left\"]}\n        className=\"Card-Display\"\n      >\n        <form>\n          {/* House Location Information */}\n          <Flex flexWrap=\"wrap\" justifyContent={[\"center\", \"space-between\"]}>\n            {/* Address Field */}\n            <FormControl width={[\"90%\", \"45%\", \"30%\"]}>\n              <FormLabel htmlFor=\"address\">Address</FormLabel>\n              <Input\n                name=\"address\"\n                onChange={props.handleInputChange}\n                type=\"text\"\n                id=\"address\"\n                placeholder=\"21 Jump Street\"\n                aria-describedby=\"address-helper-text\"\n              />\n              <FormHelperText id=\"address-helper-text\" mb=\"0.5rem\">\n                Where is it located?\n              </FormHelperText>\n            </FormControl>\n            {/* Zip Code Field */}\n            <FormControl width={[\"90%\", \"45%\", \"30%\"]}>\n              <FormLabel htmlFor=\"zip\">Zip Code</FormLabel>\n              <Input\n                name=\"zip\"\n                onChange={props.handleInputChange}\n                type=\"text\"\n                id=\"zip\"\n                placeholder=\"91210\"\n                aria-describedby=\"zip-helper-text\"\n                maxLength=\"5\"\n              />\n              <FormHelperText id=\"zip-helper-text\" mb=\"0.5rem\">\n                The 5 digit neighborhood code.\n              </FormHelperText>\n            </FormControl>\n            {/* Purchase Price & Information */}\n            {/* Purchase Price */}\n            <FormControl width={[\"90%\", \"45%\", \"30%\"]}>\n              <FormLabel htmlFor=\"price\">Purchase Price</FormLabel>\n              <Input\n                name=\"price\"\n                onChange={props.handleInputChange}\n                type=\"number\"\n                id=\"price\"\n                placeholder=\"120000\"\n                aria-describedby=\"price-helper-text\"\n              />\n              <FormHelperText id=\"zip-helper-text\" mb=\"0.5rem\">\n                Exclude commas and use US dollars.\n              </FormHelperText>\n            </FormControl>\n            {/* Loan Info Group */}\n            {/* Loan Amount*/}\n            <FormControl width={[\"90%\", \"45%\", \"30%\"]}>\n              <FormLabel htmlFor=\"loan\">Loan Amount</FormLabel>\n              <Input\n                name=\"loanAmount\"\n                onChange={props.handleInputChange}\n                type=\"number\"\n                id=\"loan\"\n                placeholder=\"100000\"\n                aria-describedby=\"loan-helper-text\"\n              />\n              <FormHelperText id=\"loan-helper-text\" mb=\"0.5rem\">\n                Round to the nearest whole number.\n              </FormHelperText>\n            </FormControl>\n            {/* Loan Interest Rate*/}\n            <FormControl width={[\"90%\", \"45%\", \"30%\"]}>\n              <FormLabel htmlFor=\"interestRate\">Loan Interest Rate</FormLabel>\n              <Input\n                name=\"interestRate\"\n                onChange={props.handleInputChange}\n                type=\"number\"\n                id=\"interestRate\"\n                placeholder=\"5\"\n                aria-describedby=\"interest-helper-text\"\n              />\n              <FormHelperText id=\"interest-helper-text\" mb=\"0.5rem\">\n                Rounded percentage rate.\n              </FormHelperText>\n            </FormControl>\n            {/* Loan Period*/}\n            <FormControl width={[\"90%\", \"45%\", \"30%\"]}>\n              <FormLabel htmlFor=\"loan-period\">Loan Period</FormLabel>\n              <Input\n                min={0}\n                name=\"loanPeriod\"\n                id=\"loan-period\"\n                placeholder=\"20\"\n                aria-describedby=\"loan-period-helper-text\"\n                onChange={props.handleInputChange}\n                type=\"number\"\n              />\n              <FormHelperText id=\"loan-period-helper-text\" mb=\"0.5rem\">\n                Length of loan in years.\n              </FormHelperText>\n            </FormControl>\n            {/* Income and Expenses information */}\n            <FormControl width={[\"90%\", \"45%\", \"30%\"]}>\n              {/* Estimated Monthly Rent */}\n              <FormLabel htmlFor=\"rent\">Estimated Monthly Rent</FormLabel>\n              <Input\n                name=\"rent\"\n                onChange={props.handleInputChange}\n                type=\"number\"\n                id=\"rent\"\n                placeholder=\"1200\"\n                aria-describedby=\"rent-helper-text\"\n              />\n              <FormHelperText id=\"rent-helper-text\" mb=\"0.5rem\">\n                Exclude commas and use US dollars.\n              </FormHelperText>\n            </FormControl>\n            {/* Initial Expenses */}\n            <FormControl width={[\"90%\", \"45%\", \"30%\"]}>\n              <FormLabel htmlFor=\"initial-expenses\">\n                Estimated Initial Expenses\n              </FormLabel>\n              <Input\n                name=\"initialExpenses\"\n                onChange={props.handleInputChange}\n                type=\"number\"\n                id=\"initial-expenses\"\n                placeholder=\"17000\"\n                aria-describedby=\"initial-expenses-helper-text\"\n              />\n              <FormHelperText id=\"initial-expenses-helper-text\" mb=\"0.5rem\">\n                Closing costs, initial repairs, etc.\n              </FormHelperText>\n            </FormControl>\n            {/* Recurring Monthly Expenses */}\n            <FormControl width={[\"90%\", \"45%\", \"30%\"]}>\n              <FormLabel htmlFor=\"monthly-expenses\">\n                Estimated Monthly Expenses\n              </FormLabel>\n              <Input\n                name=\"monthlyExpenses\"\n                onChange={props.handleInputChange}\n                type=\"number\"\n                id=\"monthly-expenses\"\n                placeholder=\"350\"\n                aria-describedby=\"monthly-expenses-helper-text\"\n              />\n              <FormHelperText id=\"monthly-expenses-helper-text\" mb=\"0.5rem\">\n                Recurring bills excluding mortgage.\n              </FormHelperText>\n            </FormControl>\n          </Flex>\n        </form>\n      </Box>\n    );\n}\n","import React from \"react\";\nimport {\n  Box,\n  Heading,\n  Text,\n  Stat,\n  StatLabel,\n  StatHelpText,\n  StatGroup,\n  StatNumber,\n  Slider,\n  SliderTrack,\n  SliderFilledTrack,\n  SliderThumb,\n} from \"@chakra-ui/core\";\n\nexport default function Results(props) {\n  const results = props.results;\n  const header =\n    props.address === \"\" && props.zip === \"\"\n      ? \" \"\n      : `Showing Analysis for ${props.address}, ${props.zip}`;\n  return (\n    <Box\n      className=\"Card-Display\"\n      p={5}\n      width={[\"80%\", \"40%\"]}\n      my={6}\n      backgroundColor=\"white\"\n    >\n      <Heading textAlign=\"center\" as=\"h2\" size=\"md\" mb={6}>\n        {header}\n      </Heading>\n      <StatGroup\n        flexWrap=\"wrap\"\n        alignContent=\"center\"\n        align=\"center\"\n        justifyContent=\"space-evenly\"\n        whiteSpace={{ lg: \"nowrap\", sm: \"normal\" }}\n        textAlign=\"center\"\n      >\n        <Stat px={2} minW=\"50%\">\n          <StatLabel>Total Cost</StatLabel>\n          <StatNumber>\n            ${formattedNumDisplayOf(results.totalProjectCost)}\n          </StatNumber>\n          <StatHelpText>Over Time</StatHelpText>\n        </Stat>\n        <Stat px={2} minW=\"50\">\n          <StatLabel>Cash Down</StatLabel>\n          <StatNumber>\n            ${formattedNumDisplayOf(results.outOfPocketCosts)}\n          </StatNumber>\n          <StatHelpText>Out of Pocket</StatHelpText>\n        </Stat>\n        <Stat px={2} minW=\"50%\">\n          <StatLabel>Mortgage</StatLabel>\n          <StatNumber>\n            ${formattedNumDisplayOf(results.monthlyMortgagePayment)}\n          </StatNumber>\n          <StatHelpText>Per Month</StatHelpText>\n        </Stat>\n        <Stat px={2} minW=\"50%\">\n          <StatLabel>Rent Income</StatLabel>\n          <StatNumber>\n            ${formattedNumDisplayOf(results.estimatedMonthlyIncome)}\n          </StatNumber>\n          <StatHelpText>Per Month</StatHelpText>\n        </Stat>\n        <Stat px={2} minW=\"50%\">\n          <StatLabel>Total Expenses</StatLabel>\n          <StatNumber>\n            ${formattedNumDisplayOf(results.estimatedMonthlyExpenses)}\n          </StatNumber>\n          <StatHelpText>Per Month</StatHelpText>\n        </Stat>\n        <Stat px={2} minW=\"50%\">\n          <StatLabel>Cash Flow</StatLabel>\n          <StatNumber>${formattedNumDisplayOf(results.cashFlow)}</StatNumber>\n          <StatHelpText>Per Month</StatHelpText>\n        </Stat>\n        <Stat px={2} minW=\"50%\">\n          <StatLabel>Selling Price</StatLabel>\n          <StatNumber>\n            ${formattedNumDisplayOf(results.projectedSalesPrice)}\n          </StatNumber>\n          <StatHelpText>At time of Sale</StatHelpText>\n        </Stat>\n        <Stat px={2} minW=\"50%\">\n          <StatLabel>Selling Expenses</StatLabel>\n          <StatNumber>\n            $\n            {results.totalProjectCost === 0\n              ? 0\n              : formattedNumDisplayOf(results.projectedSalesExpenses)}\n          </StatNumber>\n          <StatHelpText>At time of Sale</StatHelpText>\n        </Stat>\n        <Stat px={2} minW=\"50%%\">\n          <StatLabel>Cash on Cash</StatLabel>\n          <StatNumber>{formattedNumDisplayOf(results.cocROI)}%</StatNumber>\n          <StatHelpText>ROI</StatHelpText>\n        </Stat>\n        <Stat px={2} minW=\"50%\">\n          <StatLabel>Total Return</StatLabel>\n          <StatNumber>{formattedNumDisplayOf(results.totalROI)}%</StatNumber>\n          <StatHelpText>ROI</StatHelpText>\n        </Stat>\n      </StatGroup>\n      {/* Holding Term Slider */}\n      <Slider\n        aria-label=\"Holding Term\"\n        defaultValue={results.holdingTerm}\n        onChange={props.handleSliderChange}\n        min={1}\n        max={50}\n      >\n        <SliderTrack />\n        <SliderFilledTrack bg=\"teal.500\" />\n        <SliderThumb />\n      </Slider>\n      <Heading textAlign=\"center\" as=\"h3\" size=\"md\">\n        After Holding for{\" \"}\n        <Text display=\"inline\" color=\"teal.600\" size=\"md\">\n          {results.holdingTerm}\n        </Text>{\" \"}\n        {results.holdingTerm > 1 ? \"Years\" : \"Year\"} Before Selling\n      </Heading>\n    </Box>\n  );\n}\n\n/* *** Utility Functions *** */\n// If the result is not a number or not yet calculated, display it as 0\nfunction formattedNumDisplayOf(resultNumber) {\n  return isFinite(resultNumber) ? resultNumber.toLocaleString() : \"0\";\n}\n","import React from \"react\";\nimport \"./App.css\";\nimport Form from \"./components/Form\";\nimport Results from \"./components/Results\";\n\n// Chakra UI Components\nimport {\n  ThemeProvider,\n  CSSReset,\n  Heading,\n  Box,\n  Flex,\n  Text,\n  Link,\n} from \"@chakra-ui/core\";\n\nexport default class App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      address: \"\",\n      zip: \"\",\n      price: 0,\n      loanAmount: 0,\n      interestRate: 0,\n      loanPeriod: 0,\n      rent: 0,\n      initialExpenses: 0,\n      monthlyExpenses: 0,\n      holdingTerm: 20,\n    };\n    this.updatePropertyInfo = this.updatePropertyInfo.bind(this);\n    this.handleInputChange = this.handleInputChange.bind(this);\n    this.handleSliderChange = this.handleSliderChange.bind(this);\n    this.calculateResults = this.calculateResults.bind(this);\n  }\n\n  // Updates the state based on the given field and its updated value\n  updatePropertyInfo(field, newVal) {\n    this.setState({ [field]: newVal });\n  }\n\n  // Handles input changes within the form component\n  handleInputChange(event) {\n    event.preventDefault();\n    let value;\n    // Retrieve appropriate value format based on input type\n    if (event.target.type === \"text\") {\n      value = event.target.value;\n    } else {\n      value = isNaN(event.target.value) ? 0 : parseFloat(event.target.value);\n    }\n    this.updatePropertyInfo(event.target.name, value);\n  }\n\n  // Handles slider changes within the results component\n  handleSliderChange(value) {\n    this.updatePropertyInfo(\"holdingTerm\", value);\n  }\n\n  calculateResults() {\n    /* *** Step One: Purchase Cost *** */\n    const totalProjectCost = this.state.price + this.state.initialExpenses;\n    /* *** Step Two: Total Cost Out of Pocket *** */\n    const outOfPocketCosts = totalProjectCost - this.state.loanAmount;\n    /* *** Step Three: Calculate the monthly mortgage payment (loan amortization) *** */\n    const monthlyMortgagePayment = this.calculatedMonthlyMortgage(\n      this.state.loanAmount,\n      this.state.interestRate,\n      this.state.loanPeriod\n    );\n    /* *** Step Four: Determine Total Income *** */\n    const totalIncome = this.state.rent;\n    /* *** Step Five: Determine Total Expenses *** */\n    const totalExpenses = this.state.monthlyExpenses + monthlyMortgagePayment;\n\n    /* *** Step Six: Evaluate the Deal *** */\n    const cashFlow = totalIncome - totalExpenses;\n    const remainingLoan =\n      this.state.loanAmount -\n      this.state.holdingTerm * monthlyMortgagePayment * 12;\n\n    // salesPrice = Projected equity of annual 2% increase\n    const projectedSalesPrice = this.calculatedHouseAppreciation(\n      this.state.price,\n      this.state.holdingTerm\n    );\n\n    // salesExpenses = 6% for real estate agent, 4,000 in closing costs, and 4% painting\n    const projectedSalesExpenses = Math.round(\n      projectedSalesPrice * 0.06 + projectedSalesPrice * 0.04 + 4000\n    );\n    \n    // Calculated overall profit at sale\n    const totalProfit =\n      projectedSalesPrice -\n      projectedSalesExpenses -\n      remainingLoan -\n      outOfPocketCosts;\n\n    // cocROI = annualCashFlow / totalInvestedCapital\n    // totalROI = (totalProfit / totalInvestedCapital) / time (before selling)\n    const cocROI = ((cashFlow * 12) / outOfPocketCosts) * 100;\n    const totalROI =\n      (totalProfit / outOfPocketCosts / this.state.holdingTerm) * 100;\n\n    // Return the results as an object that can be called from the results component\n    const results = {\n      totalProjectCost: totalProjectCost,\n      outOfPocketCosts: outOfPocketCosts,\n      monthlyMortgagePayment: monthlyMortgagePayment,\n      estimatedMonthlyIncome: totalIncome,\n      estimatedInitialExpenses: this.state.initialExpenses,\n      estimatedMonthlyExpenses: totalExpenses,\n      cashFlow: cashFlow,\n      cocROI: Math.round(100 * cocROI) / 100, // round to hundredth\n      totalROI: Math.round(100 * totalROI) / 100, // round to ten hundredth\n      holdingTerm: this.state.holdingTerm,\n      projectedSalesPrice: projectedSalesPrice,\n      projectedSalesExpenses: projectedSalesExpenses,\n    };\n    return results;\n  }\n\n  /* \n    Based on Monthly Fixed-Rate Mortgage method \n    Follows steps provided by https://www.thebalance.com/calculate-mortgage-315668\n    Monthly Loan Payment = Loan Amount / Discount Factor \n  */\n  calculatedMonthlyMortgage(loanAmount, interestRate, period) {\n    const numOfPeriodicPayments = period * 12;\n    const periodicInterestRate = interestRate / 100 / 12;\n    const discountFactor =\n      (Math.pow(1 + periodicInterestRate, numOfPeriodicPayments) - 1) /\n      (periodicInterestRate *\n        Math.pow(1 + periodicInterestRate, numOfPeriodicPayments));\n    // Round to nearest hundredth\n    return Math.round(100 * (loanAmount / discountFactor)) / 100;\n  }\n\n  /*\n    Assumes an average appreciation of 2% per year and returns the \n    projected equity after the length of the current holding term.\n  */\n  calculatedHouseAppreciation(price, holdingTerm) {\n    let currentEquity = price;\n    for (let i = 0; i < holdingTerm; i++) {\n      currentEquity += currentEquity * 0.02;\n    }\n    return Math.round(currentEquity);\n  }\n\n  render() {\n    const results = this.calculateResults();\n    return (\n      <ThemeProvider>\n        <CSSReset />\n        <Box className=\"App\" backgroundColor=\"gray.50\">\n          <Heading textAlign=\"center\" mb={4}>\n            Rental Property Analysis\n          </Heading>\n          <Flex\n            alignItems=\"center\"\n            justifyContent=\"space-around\"\n            flexDir=\"column\"\n          >\n            {/* Form for taking House Info */}\n            <Form handleInputChange={this.handleInputChange} />\n            {/* Only Renders when form is submitted */}\n            <Results\n              address={this.state.address}\n              zip={this.state.zip}\n              results={results}\n              handleSliderChange={this.handleSliderChange}\n            />\n          </Flex>\n          <Box className=\"Footer\" py={6} mt={3}>\n            <footer>\n              <Text fontSize=\"sm\">\n                Inspired by{\" \"}\n                <Link\n                  color=\"teal.500\"\n                  href=\"https://www.biggerpockets.com/buy_and_hold_results/new\"\n                >\n                  Bigger Pockets Property Analysis Tool\n                </Link>\n              </Text>\n              <Text fontSize=\"sm\">\n                Copyright &copy; {new Date().getFullYear()} Smith & Butler LLC\n              </Text>\n            </footer>\n          </Box>\n        </Box>\n      </ThemeProvider>\n    );\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App.jsx';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}