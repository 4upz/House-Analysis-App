{"version":3,"sources":["components/Form.jsx","App.jsx","serviceWorker.js","index.js"],"names":["Form","props","state","address","zip","price","loanAmount","interestRate","loanPeriod","rent","initialExpenses","monthlyExpenses","handleNumberChange","bind","handleTextChange","event","preventDefault","value","target","this","setState","name","updatePropertyInfo","isNaN","parseFloat","Box","backgroundColor","w","p","className","onSubmit","handleSubmit","Flex","flexWrap","justifyContent","FormControl","FormLabel","htmlFor","Input","onChange","type","id","placeholder","aria-describedby","FormHelperText","mb","maxLength","min","max","React","Component","App","calculateResults","field","newVal","totalProjectCost","outOfPocketCosts","monthlyMortgagePayment","calculatedMonthlyMortgage","totalIncome","totalExpenses","cashFlow","cocROI","totalROI","estimatedMonthlyIncome","estimatedInitialExpenses","estimatedMonthlyExpenses","Math","round","period","numOfPeriodicPayments","periodicInterestRate","discountFactor","pow","results","ThemeProvider","CSSReset","Heading","textAlign","alignItems","Results","py","mt","Text","fontSize","Link","color","href","Date","getFullYear","header","my","Stack","align","as","size","formattedNumDisplayOf","resultNumber","toLocaleString","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.13b68b1b.chunk.js","sourcesContent":["import React from \"react\";\r\nimport {\r\n    Box,\r\n    FormControl,\r\n    FormLabel,\r\n    FormHelperText,\r\n    Input,\r\n    Flex,\r\n} from \"@chakra-ui/core\";\r\n\r\nexport default class Form extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            address: \"\",\r\n            zip: \"\",\r\n            price: 0,\r\n            loanAmount: 0,\r\n            interestRate: 0,\r\n            loanPeriod: 0,\r\n            rent: 0,\r\n            initialExpenses: 0,\r\n            monthlyExpenses: 0,\r\n        };\r\n        this.handleNumberChange = this.handleNumberChange.bind(this);\r\n        this.handleTextChange = this.handleTextChange.bind(this);\r\n    }\r\n\r\n    // Updates the state based on the change target value and using its name as a dynamic key name\r\n    handleTextChange(event) {\r\n        event.preventDefault();\r\n        const value = event.target.value;\r\n        this.setState({ [event.target.name]: value });\r\n        this.props.updatePropertyInfo(event.target.name, value);\r\n    }\r\n\r\n    // Variant for number values (until I find a way to combine these methods)\r\n    handleNumberChange(event) {\r\n        event.preventDefault();\r\n        // Should store the value as a float if the input expects a number\r\n        const value = isNaN(event.target.value)\r\n            ? 0\r\n            : parseFloat(event.target.value);\r\n        this.setState({ [event.target.name]: value });\r\n        this.props.updatePropertyInfo(event.target.name, value);\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <Box backgroundColor=\"white\" w=\"55%\" p={5} className=\"Card-Display\">\r\n                <form onSubmit={this.handleSubmit}>\r\n                    {/* House Location Information */}\r\n                    <Flex flexWrap=\"wrap\" justifyContent=\"space-between\">\r\n                        {/* Address Field */}\r\n                        <FormControl>\r\n                            <FormLabel htmlFor=\"address\">Address</FormLabel>\r\n                            <Input\r\n                                name=\"address\"\r\n                                value={this.state.address}\r\n                                onChange={this.handleTextChange}\r\n                                type=\"text\"\r\n                                id=\"address\"\r\n                                placeholder=\"42 Wallaby Way Sydney, Australia\"\r\n                                aria-describedby=\"address-helper-text\"\r\n                            />\r\n                            <FormHelperText\r\n                                id=\"address-helper-text\"\r\n                                mb=\"0.5rem\"\r\n                            >\r\n                                Where is it located?\r\n                            </FormHelperText>\r\n                        </FormControl>\r\n                        {/* Zip Code Field */}\r\n                        <FormControl>\r\n                            <FormLabel htmlFor=\"zip\">Zip Code</FormLabel>\r\n                            <Input\r\n                                name=\"zip\"\r\n                                value={this.state.zip}\r\n                                onChange={this.handleTextChange}\r\n                                type=\"text\"\r\n                                id=\"zip\"\r\n                                placeholder=\"12345\"\r\n                                aria-describedby=\"zip-helper-text\"\r\n                                maxLength=\"5\"\r\n                            />\r\n                            <FormHelperText id=\"zip-helper-text\" mb=\"0.5rem\">\r\n                                The 5 digit neighborhood code.\r\n                            </FormHelperText>\r\n                        </FormControl>\r\n                        {/* Purchase Price & Information */}\r\n                        {/* Purchase Price */}\r\n                        <FormControl>\r\n                            <FormLabel htmlFor=\"price\">\r\n                                Purchase Price\r\n                            </FormLabel>\r\n                            <Input\r\n                                name=\"price\"\r\n                                onChange={this.handleNumberChange}\r\n                                type=\"number\"\r\n                                id=\"price\"\r\n                                placeholder=\"120000\"\r\n                                aria-describedby=\"price-helper-text\"\r\n                            />\r\n                            <FormHelperText id=\"zip-helper-text\" mb=\"0.5rem\">\r\n                                Exclude commas and use US dollars.\r\n                            </FormHelperText>\r\n                        </FormControl>\r\n                        {/* Loan Amount*/}\r\n                        <FormControl>\r\n                            <FormLabel htmlFor=\"loan\">Loan Amount</FormLabel>\r\n                            <Input\r\n                                name=\"loanAmount\"\r\n                                onChange={this.handleNumberChange}\r\n                                type=\"number\"\r\n                                id=\"loan\"\r\n                                placeholder=\"100000\"\r\n                                aria-describedby=\"loan-helper-text\"\r\n                            />\r\n                            <FormHelperText id=\"loan-helper-text\" mb=\"0.5rem\">\r\n                                Round to the nearest whole number.\r\n                            </FormHelperText>\r\n                        </FormControl>\r\n                        {/* Loan Info Group */}\r\n                        {/* Loan Interest Rate*/}\r\n                        <FormControl>\r\n                            <FormLabel htmlFor=\"interestRate\">\r\n                                Loan Interest Rate\r\n                            </FormLabel>\r\n                            <Input\r\n                                name=\"interestRate\"\r\n                                onChange={this.handleNumberChange}\r\n                                type=\"number\"\r\n                                id=\"interestRate\"\r\n                                placeholder=\"5\"\r\n                                aria-describedby=\"interest-helper-text\"\r\n                            />\r\n                            <FormHelperText\r\n                                id=\"interest-helper-text\"\r\n                                mb=\"0.5rem\"\r\n                            >\r\n                                Rounded percentage rate.\r\n                            </FormHelperText>\r\n                        </FormControl>\r\n                        {/* Loan Period*/}\r\n                        <FormControl>\r\n                            <FormLabel htmlFor=\"loan-period\">\r\n                                Loan Period\r\n                            </FormLabel>\r\n                            <Input\r\n                                min={0}\r\n                                max={50}\r\n                                name=\"loanPeriod\"\r\n                                id=\"loan-period\"\r\n                                placeholder=\"20\"\r\n                                aria-describedby=\"loan-period-helper-text\"\r\n                                onChange={this.handleNumberChange}\r\n                                type=\"number\"\r\n                            />\r\n                            <FormHelperText\r\n                                id=\"loan-period-helper-text\"\r\n                                mb=\"0.5rem\"\r\n                            >\r\n                                Length of loan in years.\r\n                            </FormHelperText>\r\n                        </FormControl>\r\n                        {/* Income and Expenses information */}\r\n                        <FormControl>\r\n                            {/* Estimated Monthly Rent */}\r\n                            <FormLabel htmlFor=\"rent\">\r\n                                Estimated Monthly Rent\r\n                            </FormLabel>\r\n                            <Input\r\n                                name=\"rent\"\r\n                                onChange={this.handleNumberChange}\r\n                                type=\"number\"\r\n                                id=\"rent\"\r\n                                placeholder=\"1200\"\r\n                                aria-describedby=\"rent-helper-text\"\r\n                            />\r\n                            <FormHelperText id=\"rent-helper-text\" mb=\"0.5rem\">\r\n                                Exclude commas and use US dollars.\r\n                            </FormHelperText>\r\n                        </FormControl>\r\n                        {/* Initial Expenses */}\r\n                        <FormControl>\r\n                            <FormLabel htmlFor=\"initial-expenses\">\r\n                                Estimated Initial Expenses\r\n                            </FormLabel>\r\n                            <Input\r\n                                name=\"initialExpenses\"\r\n                                onChange={this.handleNumberChange}\r\n                                type=\"number\"\r\n                                id=\"initial-expenses\"\r\n                                placeholder=\"17000\"\r\n                                aria-describedby=\"initial-expenses-helper-text\"\r\n                            />\r\n                            <FormHelperText\r\n                                id=\"initial-expenses-helper-text\"\r\n                                mb=\"0.5rem\"\r\n                            >\r\n                                Closing costs, initial repairs, etc.\r\n                            </FormHelperText>\r\n                        </FormControl>\r\n                        {/* Recurring Monthly Expenses */}\r\n                        <FormControl>\r\n                            <FormLabel htmlFor=\"monthly-expenses\">\r\n                                Estimated Monthly Expenses\r\n                            </FormLabel>\r\n                            <Input\r\n                                name=\"monthlyExpenses\"\r\n                                onChange={this.handleNumberChange}\r\n                                type=\"number\"\r\n                                id=\"monthly-expenses\"\r\n                                placeholder=\"902.27\"\r\n                                aria-describedby=\"monthly-expenses-helper-text\"\r\n                            />\r\n                            <FormHelperText\r\n                                id=\"monthly-expenses-helper-text\"\r\n                                mb=\"0.5rem\"\r\n                            >\r\n                                Recurring bills excluding mortgage.\r\n                            </FormHelperText>\r\n                        </FormControl>\r\n                    </Flex>\r\n                </form>\r\n            </Box>\r\n        );\r\n    }\r\n}\r\n","import React from \"react\";\nimport \"./App.css\";\nimport Form from \"./components/Form\";\n\n// Chakra UI Components\nimport {\n    ThemeProvider,\n    CSSReset,\n    Heading,\n    Box,\n    Flex,\n    Text,\n    Stack,\n    Link,\n} from \"@chakra-ui/core\";\n\nexport default class App extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            address: \"\",\n            zip: \"\",\n            price: 0,\n            loanAmount: 0,\n            interestRate: 0,\n            loanPeriod: 0,\n            rent: 0,\n            initialExpenses: 0,\n            monthlyExpenses: 0,\n        };\n        this.calculateResults = this.calculateResults.bind(this);\n        this.updatePropertyInfo = this.updatePropertyInfo.bind(this);\n    }\n\n    // Updates the state based on the given field and its updated value\n    updatePropertyInfo(field, newVal) {\n        this.setState({ [field]: newVal });\n    }\n\n    calculateResults() {\n        // Step One: Purchase Cost\n        const totalProjectCost = this.state.price + this.state.initialExpenses;\n        // Step Two: Total Cost Out of Pocket\n        const outOfPocketCosts = totalProjectCost - this.state.loanAmount;\n        // Step Three: Calculate the monthly mortgage payment (loan amortization)\n        const monthlyMortgagePayment = this.calculatedMonthlyMortgage(\n            this.state.loanAmount,\n            this.state.interestRate,\n            this.state.loanPeriod\n        );\n        // Step Four: Determine Total Income\n        const totalIncome = this.state.rent;\n        // Step Five: Determine Total Expenses\n        const totalExpenses =\n            this.state.monthlyExpenses + monthlyMortgagePayment;\n\n        // Step Six: Evaluate the Deal\n        const totalProfit =\n            this.state.price - this.state.initialExpenses - outOfPocketCosts;\n        // cocROI = annualCashFlow / totalInvestedCapital\n        // totalROI = (totalProfit / totalInvestedCapital) / time (before selling)\n        const cashFlow = totalIncome - totalExpenses;\n        const cocROI = ((cashFlow * 12) / outOfPocketCosts) * 100;\n\n        // TODO: Add a feature to see the different totalROI across adjustable time period\n        const totalROI =\n            (totalProfit / outOfPocketCosts / this.state.loanPeriod) * 100;\n\n        const results = {\n            totalProjectCost: totalProjectCost,\n            outOfPocketCosts: outOfPocketCosts,\n            monthlyMortgagePayment: monthlyMortgagePayment,\n            estimatedMonthlyIncome: totalIncome,\n            estimatedInitialExpenses: this.state.initialExpenses,\n            estimatedMonthlyExpenses: totalExpenses,\n            cashFlow: cashFlow,\n            cocROI: Math.round(10000 * cocROI) / 10000, // round X to ten thousandth\n            totalROI: Math.round(10000 * totalROI) / 10000, // round X to ten thousandth\n        };\n        return results;\n    }\n\n    calculatedMonthlyMortgage(loanAmount, interestRate, period) {\n        /* \n        Based on Monthly Fixed-Rate Mortgage method \n        Follows steps provided by https://www.thebalance.com/calculate-mortgage-315668\n        Monthly Loan Payment = Loan Amount / Discount Factor \n        */\n        const numOfPeriodicPayments = period * 12;\n        const periodicInterestRate = interestRate / 100 / 12;\n        const discountFactor =\n            (Math.pow(1 + periodicInterestRate, numOfPeriodicPayments) - 1) /\n            (periodicInterestRate *\n                Math.pow(1 + periodicInterestRate, numOfPeriodicPayments));\n        // Round to nearest hundredth\n        return Math.round(100 * (loanAmount / discountFactor)) / 100;\n    }\n\n    render() {\n        const results = this.calculateResults();\n        return (\n            <ThemeProvider>\n                <CSSReset />\n                <Box className=\"App\" backgroundColor=\"gray.50\">\n                    <Heading textAlign=\"center\" mb={4}>\n                        Rental Property Analysis\n                    </Heading>\n                    <Flex\n                        className=\"Anlysis-Display\"\n                        alignItems=\"center\"\n                        justifyContent=\"space-around\"\n                    >\n                        {/* Form for taking House Info */}\n                        <Form\n                            updatePropertyInfo={this.updatePropertyInfo}\n                            calculateResults={this.calculateResults}\n                        />\n                        {/* Only Renders when form is submitted */}\n                        <Results\n                            address={this.state.address}\n                            zip={this.state.zip}\n                            results={results}\n                        />\n                    </Flex>\n                    <Box className=\"Footer\" py={6} mt={3}>\n                        <footer>\n                            <Text fontSize=\"sm\">\n                                Inspired by{\" \"}\n                                <Link\n                                    color=\"teal.500\"\n                                    href=\"https://www.biggerpockets.com/buy_and_hold_results/new\"\n                                >\n                                    Bigger Pockets Property Analysis Tool\n                                </Link>\n                            </Text>\n                            <Text fontSize=\"sm\">\n                                Copyright &copy; {new Date().getFullYear()}{\" \"}\n                                Smith & Butler LLC\n                            </Text>\n                        </footer>\n                    </Box>\n                </Box>\n            </ThemeProvider>\n        );\n    }\n}\n\nfunction Results(props) {\n    const results = props.results;\n    const header =\n        props.address === \"\" && props.zip === \"\"\n            ? \" \"\n            : `Showing Analysis for ${props.address}, ${props.zip}`;\n    return (\n        <Box\n            className=\"Card-Display\"\n            p={5}\n            w=\"40%\"\n            my={6}\n            backgroundColor=\"white\"\n        >\n            <Stack align=\"center\">\n                <Heading as=\"h2\" size=\"md\">\n                    {header}\n                </Heading>\n                <Text>\n                    Total Projected Cost: $\n                    {formattedNumDisplayOf(results.totalProjectCost)}\n                </Text>\n                <Text>\n                    Out of Pocket Cost: $\n                    {formattedNumDisplayOf(results.outOfPocketCosts)}\n                </Text>\n                <Text>\n                    Monthly Mortgage Payment: $\n                    {formattedNumDisplayOf(results.monthlyMortgagePayment)}\n                </Text>\n                <Text>\n                    Estimated Monthly Income: $\n                    {formattedNumDisplayOf(results.estimatedMonthlyIncome)}\n                </Text>\n                <Text>\n                    Estimated Monthly Expenses: $\n                    {formattedNumDisplayOf(results.estimatedMonthlyExpenses)}\n                </Text>\n                <Text>Cash Flow: ${formattedNumDisplayOf(results.cashFlow)}</Text>\n                <Text>\n                    Cash on Cash Return on Investment:{\" \"}\n                    {formattedNumDisplayOf(results.cocROI)}%\n                </Text>\n                <Text>\n                    Total Return on Investment{\" \"}\n                    {formattedNumDisplayOf(results.totalROI)}%\n                </Text>\n            </Stack>\n        </Box>\n    );\n}\n\n/* **** Utility Functions **** */\n// If the result is not a number or not yet calculated, display it as 0\nfunction formattedNumDisplayOf(resultNumber){\n    return isNaN(resultNumber) ? \"0\" : resultNumber.toLocaleString();\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App.jsx';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}